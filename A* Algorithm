import heapq

class Node:
    def __init__(self, name, parent=None, g=0, h=0):
        self.name = name
        self.parent = parent
        self.g = g
        self.h = h
        self.f = g + h

    def __lt__(self, other):
        return self.f < other.f

def a_star(start, goal, graph, heuristic):
    open_list = []
    closed_list = set()
    start_node = Node(start, g=0, h=heuristic[start])
    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)

        if current_node.name == goal:
            path = []
            total_cost = current_node.g
            while current_node:
                path.append(current_node.name)
                current_node = current_node.parent
            return path[::-1], total_cost

        closed_list.add(current_node.name)

        for neighbor, cost in graph[current_node.name].items():
            if neighbor in closed_list:
                continue

            g_cost = current_node.g + cost
            h_cost = heuristic.get(neighbor, float('inf'))
            neighbor_node = Node(neighbor, parent=current_node, g=g_cost, h=h_cost)

            if not any(node.name == neighbor and node.f <= neighbor_node.f for node in open_list):
                heapq.heappush(open_list, neighbor_node)

    return None, 0

graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'D': 2, 'E': 5},
    'C': {'F': 1},
    'D': {'G': 2},
    'F': {'G': 3}
}

heuristic = {
    'A': 6,
    'B': 4,
    'C': 4,
    'D': 3,
    'E': 2,
    'F': 2,
    'G': 0
}

start = 'A'
goal = 'G'
path, cost = a_star(start, goal, graph, heuristic)
print(f"Path from {start} to {goal}: {path} with total cost: {cost}")
